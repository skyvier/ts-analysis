name: lens
version: 4.13
id: lens-4.13-483248db54d709c5cae2b6cd7cb6e78e
key: lens_JPXBwBV4gwc39DbjxXVHW0
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.Coerce
    Control.Lens.Internal.Context Control.Lens.Internal.Deque
    Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
    Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
    Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
    Control.Lens.Internal.Instances Control.Lens.Internal.Iso
    Control.Lens.Internal.Level Control.Lens.Internal.List
    Control.Lens.Internal.Magma Control.Lens.Internal.Prism
    Control.Lens.Internal.Review Control.Lens.Internal.Setter
    Control.Lens.Internal.TH Control.Lens.Internal.Zoom
    Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
    Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
    Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
    Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
    Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
    Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
    Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
    Data.ByteString.Lens Data.ByteString.Strict.Lens
    Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
    Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
    Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
    System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
    Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/skyvier/Programming/haskell/projects/TimeSeries/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.3/lens-4.13-JPXBwBV4gwc39DbjxXVHW0
library-dirs: /home/skyvier/Programming/haskell/projects/TimeSeries/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.3/lens-4.13-JPXBwBV4gwc39DbjxXVHW0
data-dir: /home/skyvier/Programming/haskell/projects/TimeSeries/.cabal-sandbox/share/x86_64-linux-ghc-7.10.3/lens-4.13
hs-libraries: HSlens-4.13-JPXBwBV4gwc39DbjxXVHW0
depends:
    array-0.5.1.0-960bf9ae8875cc30355e086f8853a049
    base-4.8.2.0-0d6d1084fbc041e1cded9228e80e264d
    base-orphans-0.4.5-fd5d4ef84797b48b23d9bf0d3ccf8c05
    bifunctors-5.1-56f1cb7022b58d7326d664e125f0687f
    bytestring-0.10.6.0-c60f4c543b22c7f7293a06ae48820437
    comonad-4.2.7.2-9665f082f17e80ef137ad9a4763e61bb
    containers-0.5.6.2-e59c9b78d840fa743d4169d4bea15592
    contravariant-1.3.3-c813c6867e338000c2c1570a23a184af
    distributive-0.4.4-b95ed4231343f39d658fda269121c754
    exceptions-0.8.0.2-16fa90d1e406eb718636ce85cc1df05c
    filepath-1.4.0.0-f97d1e4aebfd7a03be6980454fe31d6e
    free-4.12.1-af8a4a881f8fd61ebc3a9a2bf12cbb50
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.3.3-eec7a510a757914e64af4faad5258f67
    kan-extensions-4.2.3-0564130c3b93fc6f7d8ece7aa33d6470
    mtl-2.2.1-3af90341e75ee52dfc4e3143b4e5d219
    parallel-3.2.0.6-9e72a2f4f98d0fe7286a7eeba2ea58ff
    profunctors-5.1.2-c37276fca2b7933e887e6ad2c9c974c2
    reflection-2.1-93a3494a75c3e245de6c8da9296e0a61
    semigroupoids-5.0.0.4-1a2b9f80d064a5c871893f91e4cf5979
    semigroups-0.18.0.1-1d7337876023b3917815df98763fd706
    tagged-0.8.2-16a51d8cfafeba080a9011b87265d84b
    template-haskell-2.10.0.0-3c4cb52230f347282af9b2817f013181
    text-1.2.1.3-37339a0eb1fbe798089eff2a5a31be3a
    transformers-0.4.2.0-81450cd8f86b36eaa8fa0cbaf6efc3a3
    transformers-compat-0.4.0.4-8aa4073730c676dbe210ea8bffd8d092
    unordered-containers-0.2.5.1-eb436d0d2f68e28fb13fa2f2239b2495
    vector-0.11.0.0-299aefb173ce5a731565d31f609a0cfd
    void-0.7.1-6d7353778e8051dc25ab7a1773306bbd
haddock-interfaces: /home/skyvier/Programming/haskell/projects/TimeSeries/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.3/lens-4.13/html/lens.haddock
haddock-html: /home/skyvier/Programming/haskell/projects/TimeSeries/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.3/lens-4.13/html
